AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to deploy a Lambda function that pushes data to the ingestion pipeline'

Parameters:
  ApiEndpoint:
    Type: String
    Default: 'https://616ac7pxog.execute-api.eu-central-1.amazonaws.com/ingest'
    Description: 'The API endpoint URL for the ingestion pipeline'
  
  ApiKey:
    Type: String
    Default: 'e269557885704354904be153ea773de4'
    Description: 'The API key for the ingestion pipeline'
    NoEcho: true
  
  ScheduleExpression:
    Type: String
    Default: 'rate(1 minute)'
    Description: 'How frequently to generate and send data (using CloudWatch Events schedule expression)'

Resources:
  # IAM Role for the Lambda function
  DataGeneratorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  # Lambda function that generates and sends data
  DataGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt DataGeneratorRole.Arn
      Runtime: nodejs18.x
      Timeout: 30
      Environment:
        Variables:
          API_ENDPOINT: !Ref ApiEndpoint
          API_KEY: !Ref ApiKey
      Code:
        ZipFile: |
          const https = require('https');
          const url = require('url');

          exports.handler = async (event) => {
            try {
              // Generate random value between 0 and 999
              const randomValue = Math.floor(Math.random() * 1000);
              
              // Select a random message from the predefined options
              const messages = ["test data", "test data 1", "test data 2"];
              const randomMessage = messages[Math.floor(Math.random() * messages.length)];
              
              // Prepare the payload
              const payload = {
                message: randomMessage,
                value: randomValue
              };
              
              console.log(`Sending payload: ${JSON.stringify(payload)}`);
              
              // Send the data to the API endpoint
              const response = await sendHttpRequest(
                process.env.API_ENDPOINT,
                'POST',
                payload,
                {
                  'Content-Type': 'application/json',
                  'x-api-key': process.env.API_KEY
                }
              );
              
              console.log(`Response: ${JSON.stringify(response)}`);
              return {
                statusCode: 200,
                body: JSON.stringify({
                  message: 'Data sent successfully',
                  payload,
                  response
                })
              };
            } catch (error) {
              console.error('Error:', error);
              return {
                statusCode: 500,
                body: JSON.stringify({
                  message: 'Error sending data',
                  error: error.message
                })
              };
            }
          };
          
          function sendHttpRequest(apiUrl, method, data, headers) {
            return new Promise((resolve, reject) => {
              const parsedUrl = url.parse(apiUrl);
              
              const options = {
                hostname: parsedUrl.hostname,
                path: parsedUrl.path,
                method: method,
                headers: headers
              };
              
              const req = https.request(options, (res) => {
                let responseData = '';
                
                res.on('data', (chunk) => {
                  responseData += chunk;
                });
                
                res.on('end', () => {
                  try {
                    const parsedData = responseData ? JSON.parse(responseData) : {};
                    resolve({
                      statusCode: res.statusCode,
                      headers: res.headers,
                      body: parsedData
                    });
                  } catch (error) {
                    resolve({
                      statusCode: res.statusCode,
                      headers: res.headers,
                      body: responseData
                    });
                  }
                });
              });
              
              req.on('error', (error) => {
                reject(error);
              });
              
              if (data) {
                req.write(JSON.stringify(data));
              }
              
              req.end();
            });
          }

  # CloudWatch Events Rule to trigger the Lambda function periodically
  DataGeneratorSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: 'Schedule to trigger the data generator Lambda function'
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED
      Targets:
        - Arn: !GetAtt DataGeneratorFunction.Arn
          Id: 'DataGeneratorTarget'

  # Permission for CloudWatch Events to invoke the Lambda function
  DataGeneratorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref DataGeneratorFunction
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt DataGeneratorSchedule.Arn

Outputs:
  DataGeneratorFunction:
    Description: 'The ARN of the data generator Lambda function'
    Value: !GetAtt DataGeneratorFunction.Arn
  
  DataGeneratorSchedule:
    Description: 'The ARN of the CloudWatch Events rule'
    Value: !GetAtt DataGeneratorSchedule.Arn
